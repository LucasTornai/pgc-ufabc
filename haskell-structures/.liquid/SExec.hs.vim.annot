1:1-1:1::SExec.$trModule :: "GHC.Types.Module"
23:1-23:5::SExec.exec :: "x1:SExec.Code -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))<\\x1 VV -> {m : (Memory.Mem GHC.Types.Int) | validMem m x1 x1}> -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
23:26-23:38::SExec.exec :: "x1:SExec.Code -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))<\\x1 VV -> {m : (Memory.Mem GHC.Types.Int) | validMem m x1 x1}> -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
23:31-23:32::c :: "{v : SExec.Code | v == c}"
23:33-23:38::lq_anf$##7205759403792811254 :: "{v : (GHC.Types.Int, (Memory.Mem GHC.Types.Int)) | x_Tuple22 v == m\n                                                   && x_Tuple21 v == n\n                                                   && lqdc##$select v == m\n                                                   && lqdc##$select v == n\n                                                   && snd v == m\n                                                   && fst v == n\n                                                   && v == (,) n m}"
23:34-23:35::n :: "{v : GHC.Types.Int | v == n}"
23:36-23:37::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
24:26-24:46::SExec.exec :: "x1:SExec.Code -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))<\\x1 VV -> {m : (Memory.Mem GHC.Types.Int) | validMem m x1 x1}> -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
24:31-24:32::c :: "{v : SExec.Code | v == c}"
24:33-24:46::lq_anf$##7205759403792811257 :: "{v : (GHC.Types.Int, (Memory.Mem GHC.Types.Int)) | x_Tuple21 v == a\n                                                   && lqdc##$select v == a\n                                                   && fst v == a}"
24:34-24:35::a :: "{v : GHC.Types.Int | v == a}"
24:36-24:45::lq_anf$##7205759403792811256 :: "{v : (Memory.Mem GHC.Types.Int) | memAddrs v == Set_cup (Set_sng r) (memAddrs m)\n                                  && v == set r a m}"
24:40-24:41::r :: "{v : GHC.Types.Int | v == r}"
24:42-24:43::a :: "{v : GHC.Types.Int | v == a}"
24:44-24:45::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
25:26-25:53::SExec.exec :: "x1:SExec.Code -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))<\\x1 VV -> {m : (Memory.Mem GHC.Types.Int) | validMem m x1 x1}> -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
25:31-25:32::c :: "{v : SExec.Code | v == c}"
25:33-25:53::lq_anf$##7205759403792811261 :: "{v : (GHC.Types.Int, (Memory.Mem GHC.Types.Int)) | x_Tuple22 v == m\n                                                   && lqdc##$select v == m\n                                                   && snd v == m}"
25:34-25:35::a :: "{v : GHC.Types.Int | v == a}"
25:42-25:49::lq_anf$##7205759403792811259 :: "{v : GHC.Types.Int | v == get r m\n                     && v == (if r == addr m then val m else get r (mem m))}"
25:46-25:47::r :: "{v : GHC.Types.Int | v == r}"
25:48-25:49::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
25:51-25:52::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
26:26-26:47::SExec.exec :: "x1:SExec.Code -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))<\\x1 VV -> {m : (Memory.Mem GHC.Types.Int) | validMem m x1 x1}> -> (GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
26:31-26:32::c :: "{v : SExec.Code | v == c}"
26:33-26:47::lq_anf$##7205759403792811264 :: "{v : (GHC.Types.Int, (Memory.Mem GHC.Types.Int)) | x_Tuple21 v == a\n                                                   && lqdc##$select v == a\n                                                   && fst v == a}"
26:34-26:35::a :: "{v : GHC.Types.Int | v == a}"
26:37-26:46::lq_anf$##7205759403792811263 :: "{v : (Memory.Mem GHC.Types.Int) | memAddrs v == Set_dif (memAddrs m) (Set_sng r)\n                                  && v == unset r m}"
26:43-26:44::r :: "{v : GHC.Types.Int | v == r}"
26:45-26:46::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
27:26-27:31::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && lqdc##$select v == x2\n                                                                                           && lqdc##$select v == x1\n                                                                                           && snd v == x2\n                                                                                           && fst v == x1\n                                                                                           && v == (,) x1 x2} | VV == (,)}"
27:27-27:28::a :: "{v : GHC.Types.Int | v == a}"
27:29-27:30::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
32:1-32:9::SExec.validMem :: "x1:(Memory.Mem GHC.Types.Int) -> x2:SExec.Code -> x3:GHC.Types.Int -> {VV : GHC.Types.Bool | VV == validMem x1 x2 x3}"
32:10-32:11::m :: "(Memory.Mem GHC.Types.Int)"
32:22-32:23::a :: "GHC.Types.Int"
32:26-32:99::lq_anf$##7205759403792811248 :: "GHC.Types.Bool"
32:29-32:52::lq_anf$##7205759403792811247 :: "GHC.Types.Bool"
32:38-32:39::r :: "{v : GHC.Types.Int | v == r}"
32:40-32:52::lq_anf$##7205759403792811246 :: "{v : (Data.Set.Internal.Set GHC.Types.Int) | v == memAddrs m}"
32:50-32:51::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
32:58-32:88::SExec.validMem :: "x1:(Memory.Mem GHC.Types.Int) -> x2:SExec.Code -> x3:GHC.Types.Int -> {VV : GHC.Types.Bool | VV == validMem x1 x2 x3}"
32:67-32:68::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
32:69-32:70::c :: "{v : SExec.Code | v == c}"
32:71-32:88::lq_anf$##7205759403792811250 :: "GHC.Types.Int"
32:72-32:73::a :: "{v : GHC.Types.Int | v == a}"
32:80-32:87::lq_anf$##7205759403792811249 :: "{v : GHC.Types.Int | v == get r m\n                     && v == (if r == addr m then val m else get r (mem m))}"
32:84-32:85::r :: "{v : GHC.Types.Int | v == r}"
32:86-32:87::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
32:94-32:99::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
33:27-33:41::SExec.validMem :: "x1:(Memory.Mem GHC.Types.Int) -> x2:SExec.Code -> x3:GHC.Types.Int -> {VV : GHC.Types.Bool | VV == validMem x1 x2 x3}"
33:36-33:37::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
33:38-33:39::c :: "{v : SExec.Code | v == c}"
33:40-33:41::n :: "{v : GHC.Types.Int | v == n}"
34:28-34:52::SExec.validMem :: "x1:(Memory.Mem GHC.Types.Int) -> x2:SExec.Code -> x3:GHC.Types.Int -> {VV : GHC.Types.Bool | VV == validMem x1 x2 x3}"
34:37-34:48::lq_anf$##7205759403792811245 :: "{v : (Memory.Mem GHC.Types.Int) | memAddrs v == Set_cup (Set_sng r) (memAddrs m)\n                                  && v == set r a m}"
34:42-34:43::r :: "{v : GHC.Types.Int | v == r}"
34:44-34:45::a :: "{v : GHC.Types.Int | v == a}"
34:46-34:47::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
34:49-34:50::c :: "{v : SExec.Code | v == c}"
34:51-34:52::a :: "{v : GHC.Types.Int | v == a}"
35:28-35:52::SExec.validMem :: "x1:(Memory.Mem GHC.Types.Int) -> x2:SExec.Code -> x3:GHC.Types.Int -> {VV : GHC.Types.Bool | VV == validMem x1 x2 x3}"
35:37-35:48::lq_anf$##7205759403792811251 :: "{v : (Memory.Mem GHC.Types.Int) | memAddrs v == Set_dif (memAddrs m) (Set_sng r)\n                                  && v == unset r m}"
35:44-35:45::r :: "{v : GHC.Types.Int | v == r}"
35:46-35:47::m :: "{v : (Memory.Mem GHC.Types.Int) | v == m}"
35:49-35:50::c :: "{v : SExec.Code | v == c}"
35:51-35:52::a :: "{v : GHC.Types.Int | v == a}"
36:18-36:22::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
42:1-42:5::SExec.code :: "{VV : SExec.Code | validMem MEmp VV 0}"
42:15-42:16::lq_anf$##7205759403792811198 :: "GHC.Types.Int"
42:17-42:52::lq_anf$##7205759403792811207 :: "SExec.Code"
42:23-42:25::lq_anf$##7205759403792811200 :: "GHC.Types.Int"
42:26-42:51::lq_anf$##7205759403792811206 :: "SExec.Code"
42:33-42:35::lq_anf$##7205759403792811202 :: "GHC.Types.Int"
42:36-42:50::lq_anf$##7205759403792811205 :: "{v : SExec.Code | Add##lqdc##$select v == Halt}"
42:42-42:44::lq_anf$##7205759403792811204 :: "GHC.Types.Int"
42:45-42:49::SExec.Halt :: "{v : SExec.Code | v == Halt}"
45:1-45:11::SExec.runExample :: "(GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
45:19-45:23::SExec.code :: "{v : SExec.Code | validMem MEmp v 0\n                  && v == code}"
45:24-45:32::lq_anf$##7205759403792811269 :: "(GHC.Types.Int, (Memory.Mem GHC.Types.Int))"
45:25-45:26::lq_anf$##7205759403792811267 :: "GHC.Types.Int"
45:27-45:31::_ :: "{VV : forall a .\n      {v : (Memory.Mem a) | memAddrs v == Set_empty 0\n                            && v == MEmp} | VV == MEmp}"
51:1-51:4::SExec.add :: "x1:GHC.Types.Int -> x2:GHC.Types.Int -> {VV : GHC.Types.Int | VV == add x1 x2\n                                                              && VV == x1 + x2}"