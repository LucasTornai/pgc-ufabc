(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_anf$36$$35$$35$7205759403792806211$35$$35$d3hp () Int)
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun MyBST.validBST () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun VV$35$$35$F$35$$35$31 () Int)
(declare-fun lit$36$MyBST () Str)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 () Int)
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun MyBST.Node () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun fix$36$$36$krep_a3hb () Int)
(declare-fun VV$35$$35$F$35$$35$23 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lit$36$$39$Empty () Str)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$616 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$656 () Int)
(declare-fun lit$36$$39$Node () Str)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_karg$36$VV$35$$35$603$35$$35$k_$35$$35$604 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806214$35$$35$d3hs () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$506 () Int)
(declare-fun lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$604 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun autolen () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$532 () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun fix$36$$36$krep_a3he () Int)
(declare-fun lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$616 () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun VV$35$$35$F$35$$35$24 () Int)
(declare-fun lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$604 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$520 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$895 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$616 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806216$35$$35$d3hu () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$604 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806212$35$$35$d3hq () Int)
(declare-fun lit$36$main () Str)
(declare-fun VV$35$$35$F$35$$35$33 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$532 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun papp7 () Int)
(declare-fun lq_karg$36$VV$35$$35$531$35$$35$k_$35$$35$532 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm () Int)
(declare-fun lq_tmp$36$x$35$$35$789 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg () Int)
(declare-fun lq_tmp$36$x$35$$35$745 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806224$35$$35$d3hC () Int)
(declare-fun fix$36$$36$krep_a3hd () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 () Int)
(declare-fun lq_tmp$36$x$35$$35$868 () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$656 () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806211$35$$35$d3hp$35$$35$k_$35$$35$656 () Int)
(declare-fun lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806231$35$$35$d3hJ () Int)
(declare-fun lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$656 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_tmp$36$x$35$$35$762 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_tmp$36$x$35$$35$769 () Int)
(declare-fun lq_karg$36$VV$35$$35$519$35$$35$k_$35$$35$520 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$656 () Int)
(declare-fun VV$35$$35$F$35$$35$32 () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$532 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun fix$36$$36$krep_a3h7 () Int)
(declare-fun MyBST.Empty () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$520 () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun VV$35$$35$F$35$$35$21 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$616 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_tmp$36$x$35$$35$875 () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$532 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$F$35$$35$35 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun MyBST.invalidBST () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf () Int)
(declare-fun lq_tmp$36$x$35$$35$851 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$656 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.$36$tcOrd () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun lq_karg$36$VV$35$$35$615$35$$35$k_$35$$35$616 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun fix$36$$36$krep_a3hc () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun VV$35$$35$F$35$$35$22 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 () Int)
(declare-fun lq_karg$36$VV$35$$35$655$35$$35$k_$35$$35$656 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806236$35$$35$d3hO () Int)
(declare-fun lq_karg$36$VV$35$$35$505$35$$35$k_$35$$35$506 () Int)
(declare-fun VV$35$$35$F$35$$35$34 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806206$35$$35$d3hk () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun VV$35$$35$F$35$$35$16 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun GHC.Integer.Type.$36$fOrdInteger () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$520 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$main lit$36$$39$Node lit$36$$39$Empty lit$36$MyBST))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$MyBST) 5))
(assert (= (strLen lit$36$$39$Empty) 6))
(assert (= (strLen lit$36$$39$Node) 5))
(assert (= (strLen lit$36$main) 4))
(push 1)
(assert false)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$16 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$33 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (or  (exists ((lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 Int) (lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 Int)) (and (and (= lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 VV$35$$35$F$35$$35$18) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn) (= lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 MyBST.validBST) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)) (exists ((VV$35$$35$F$35$$35$25 Int)) (and (and (= VV$35$$35$F$35$$35$25 11) (= VV$35$$35$F$35$$35$25 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm)) (and (= lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 VV$35$$35$F$35$$35$25) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn) (= lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 MyBST.validBST) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)))))) (exists ((lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 Int) (lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 Int)) (and (and (= lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 VV$35$$35$F$35$$35$18) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn) (= lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 MyBST.validBST) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)) (exists ((VV$35$$35$F$35$$35$24 Int)) false))) (exists ((lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 Int) (lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 Int)) (and (and (= lq_karg$36$VV$35$$35$638$35$$35$k_$35$$35$639 VV$35$$35$F$35$$35$18) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806209$35$$35$d3hn) (= lq_karg$36$MyBST.validBST$35$$35$k_$35$$35$639 MyBST.validBST) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806210$35$$35$d3ho) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl$35$$35$k_$35$$35$639 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)) (exists ((VV$35$$35$F$35$$35$22 Int)) false)))) (= lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl 5) (= lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm 11) (not GHC.Types.False) GHC.Types.True))
(push 1)
(assert (not (< VV$35$$35$F$35$$35$18 lq_anf$36$$35$$35$7205759403792806207$35$$35$d3hl)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$21 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$23 lq_anf$36$$35$$35$7205759403792806208$35$$35$d3hm)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (or  (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 Int) (lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 Int)) (and (and (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg) (= lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi)) (exists ((VV$35$$35$F$35$$35$35 Int)) (and (and (= VV$35$$35$F$35$$35$35 11) (= VV$35$$35$F$35$$35$35 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh)) (and (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg) (= lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 VV$35$$35$F$35$$35$35) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi)))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 Int) (lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 Int)) (and (and (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg) (= lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi)) (exists ((VV$35$$35$F$35$$35$34 Int)) false))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 Int) (lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 Int)) (and (and (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806205$35$$35$d3hj) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806202$35$$35$d3hg) (= lq_karg$36$VV$35$$35$554$35$$35$k_$35$$35$555 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi$35$$35$k_$35$$35$555 lq_anf$36$$35$$35$7205759403792806204$35$$35$d3hi)) (exists ((VV$35$$35$F$35$$35$32 Int)) false)))) (= lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf 5) (= lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh 11) (not GHC.Types.False) GHC.Types.True))
(push 1)
(assert (not (> VV$35$$35$F$35$$35$26 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$28 lq_anf$36$$35$$35$7205759403792806201$35$$35$d3hf)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert false)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$31 lq_anf$36$$35$$35$7205759403792806203$35$$35$d3hh)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(exit)
